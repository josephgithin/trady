use serde::{Deserialize, Serialize};
use crate::common::enums::{ExchangeName, StrategyName, TradeSide};

/// Represents the status of an order
#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
#[serde(rename_all = "UPPERCASE")]
pub enum OrderStatus {
    New,
    PartiallyFilled,
    Filled,
    Cancelled,
    Rejected,
}

/// Market data from a specific exchange
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ExchangeData {
    pub exchange: ExchangeName,
    pub pair: String,
    pub price: f64,
}

/// Event containing price updates from multiple exchanges
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct PriceUpdateEvent {
    pub kraken_data: Option<ExchangeData>,
    pub coinbase_data: Option<ExchangeData>,
}

/// Trading signal generated by a strategy
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct TradeSignalEvent {
    pub symbol: String,
    pub side: TradeSide,
    pub size: f64,
    pub strategy: StrategyName,
}

/// Status update for an order
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OrderStatusEvent {
    pub order_id: String,
    pub status: OrderStatus,
    pub filled_size: f64,
    pub remaining_size: f64,
    pub fill_price: f64,
    pub reason: String,
}

/// User input event
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct UserInputEvent {
    pub action: String,
    pub value: Option<String>
}

/// Domain events that can occur in the trading system
#[derive(Debug, Serialize, Deserialize, Clone)]
pub enum DomainEvent {
    PriceUpdate(PriceUpdateEvent),
    TradeSignal(TradeSignalEvent),
    OrderStatus(OrderStatusEvent),
    UserInput(UserInputEvent)
}
